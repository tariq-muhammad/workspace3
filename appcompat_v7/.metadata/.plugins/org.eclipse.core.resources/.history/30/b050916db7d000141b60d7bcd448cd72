package com.example.crystalball;


import java.util.Random;

import com.example.crystalball.ShakeDetector.OnShakeListener;

import android.app.Activity;
import android.graphics.drawable.AnimationDrawable;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.Bundle;
import android.view.View;
import android.view.animation.AlphaAnimation;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.hardware.SensorEventListener;


public class MainActivity extends Activity {

	private CrystalBall mCrystalBall = new CrystalBall();
    private TextView mAnswerLabel = "";
	private ImageView mCrystalBallImage;
	private SensorManager mSensorManager;
	private Sensor mAccelerometer;
	private ShakeDetector mShakeDetector;
	

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // Declare our View variables and assign them the Views from the layout file
         mAnswerLabel = (TextView) findViewById(R.id.textView1);
         mCrystalBallImage = (ImageView) findViewById(R.id.imageView1);
         

         mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
         mAccelerometer = mSensorManager.getDefaultSensor (Sensor.TYPE_ACCELEROMETER);
         mShakeDetector = new ShakeDetector(new OnShakeListener(){
               	 
               	 public void onShake() {
               		 
               		 handleNewAnswer ();
               	 }
               	 
                });
    }
         		@Override
         		public void onResume(){
         			super.onResume();
         			mSensorManager.registerListener(mShakeDetector, mAccelerometer,
         	         		SensorManager.SENSOR_DELAY_UI);
         		}

         		@Override
         		public void onPause (){
         			super.onPause();
         			mSensorManager.unregisterListener(mShakeDetector);
         			
         		}
         
       
       
  
    
    private void animateCrystalBall() {
       
    	mCrystalBallImage.setImageResource(R.drawable.ball_animation);
    	AnimationDrawable ballAnimation = (AnimationDrawable) mCrystalBallImage.getDrawable();
    	if (ballAnimation.isRunning()){
    		ballAnimation.stop();
    	}
    	ballAnimation.start();
    }
    
    private void animateAnswer() {
    	AlphaAnimation fadeInAnimation = new AlphaAnimation(0, 1);
    	fadeInAnimation.setDuration(1500);
    	fadeInAnimation.setFillAfter(true);
    	
    	mAnswerLabel.setAnimation(fadeInAnimation);
    }
    
    private void playSound() {
    	MediaPlayer player = MediaPlayer.create(this, R.raw.crystal_ball);
    	player.start();
    	player.setOnCompletionListener(new OnCompletionListener(){

			@Override
			public void onCompletion(MediaPlayer mp) {
				mp.release();
				
			}
    		
    		
    	});
    }

	private void handleNewAnswer() {
		String answer = "";
		answer = mCrystalBall.getAnAnswer();
		mAnswerLabel.setText(answer);
		
		animateCrystalBall();
		animateAnswer();
		playSound();
	}


  
}
